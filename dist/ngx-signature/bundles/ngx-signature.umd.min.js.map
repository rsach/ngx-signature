{"version":3,"sources":["ng://ngx-signature/lib/ngx-signature.service.ts","ng://ngx-signature/lib/ngx-signature.component.ts","ng://ngx-signature/lib/ngx-signature.directive.ts","ng://ngx-signature/lib/ngx-signature.module.ts"],"names":["NgxSignatureService","Injectable","args","providedIn","NgxSignatureComponent","dialogRef","this","EventEmitter","prototype","ngOnInit","signaturePad","SignaturePad.default","signaturePadCanvas","nativeElement","onDragOver","evt","preventDefault","stopPropagation","dataTransfer","files","dragging","onDragLeave","onDrop","console","log","uploadFileChange","e","validateFiles","target","selected","uploadFileChangedEvent","imageCropped","image","croppedImage","imageLoaded","loadImageFailed","length","i","type","match","alert","size","doneCropping","responseImage","close","doneDrawing","toDataURL","clearDrawing","clear","resetModal","stopVideoStream","videoStream","getTracks","tracks","stop","cameraElement","src","pause","activateDrawTab","selected_tab","activateCameraTab","_this","browser","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","video","audio","then","stream","window","URL","createObjectURL","play","activateUploadTab","takeSnapshot","cameraSnapshotCanvas","getContext","drawImage","width","height","c","fx.canvas","texture","draw","hueSaturation","unsharpMask","brightnessContrast","update","capturedImage","retakeSnapshot","Component","selector","template","styles","MatDialogRef","Output","ViewChild","HostListener","NgxSignatureDirective","dialog","openComponent","open","panelClass","afterClosed","subscribe","res","onSignatureDone","emit","Directive","MatDialog","NgxSignatureModule","NgModule","imports","CommonModule","ImageCropperModule","MatDialogModule","NoopAnimationsModule","BrowserAnimationsModule","declarations","exports","entryComponents"],"mappings":"8pBAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd,GCAAC,EAAA,WA8HE,SAAAA,EACSC,GAAAC,KAAAD,UAAAA,iBAnBE,iBACA,oBAKI,4BAEmC,IAAIE,EAAAA,oBAetDH,EAAAI,UAAAC,SAAA,WAEEH,KAAKI,aAAe,IAAIC,EAAqBL,KAAKM,mBAAmBC,gBASjCT,EAAAI,UAAAM,oBAAWC,GAC/CA,EAAIC,iBACJD,EAAIE,kBACUF,EAAIG,aAAaC,MAC/Bb,KAAKc,UAAW,GAGqBhB,EAAAI,UAAAa,qBAAYN,GACjDA,EAAIC,iBACJD,EAAIE,kBACJX,KAAKc,UAAW,GAEuBhB,EAAAI,UAAAc,gBAAOP,GAC9CT,KAAKc,UAAW,EAChBG,QAAQC,IAAIT,IAIdX,EAAAI,UAAAiB,iBAAA,SAAiBC,GACXpB,KAAKqB,cAAcD,EAAEE,OAAOT,SAC9Bb,KAAKuB,UAAW,EAChBvB,KAAKwB,uBAAyBJ,IAGlCtB,EAAAI,UAAAuB,aAAA,SAAaC,GACX1B,KAAK2B,aAAeD,GAEtB5B,EAAAI,UAAA0B,YAAA,aAGA9B,EAAAI,UAAA2B,gBAAA,aAIA/B,EAAAI,UAAAmB,cAAA,SAAcR,GACZ,GAAIA,EAAMiB,OACN,IAAK,IAAIC,EAAI,EAAIA,EAAIlB,EAAMiB,OAAQC,IAAK,CACpC,IAAMlB,EAAMkB,GAAGC,KAAKC,MAAM,SAEtB,OADAC,MAAM,2CACC,EAEX,GAAuC,EAAhCrB,EAAMkB,GAAGI,KAAO,KAAQ,KAE3B,OADAD,MAAM,0CACC,EAInB,OAAO,GAGTpC,EAAAI,UAAAkC,aAAA,WACEpC,KAAKqC,cAAgBrC,KAAK2B,aAE1B3B,KAAKD,UAAUuC,MAAMtC,KAAKqC,gBAI5BvC,EAAAI,UAAAqC,YAAA,WACEvC,KAAKqC,cAAgBrC,KAAKI,aAAaoC,YAEvCxC,KAAKD,UAAUuC,MAAMtC,KAAKqC,gBAM5BvC,EAAAI,UAAAuC,aAAA,WACMzC,KAAKI,cAAgBJ,KAAKI,aAAasC,OACzC1C,KAAKI,aAAasC,SAItB5C,EAAAI,UAAAyC,WAAA,WAEE3C,KAAKyC,eAELzC,KAAKwB,uBAAyB,KAC9BxB,KAAK2B,aAAe,KACpB3B,KAAKuB,UAAW,EAEhBvB,KAAK4C,mBAGP9C,EAAAI,UAAA0C,gBAAA,WACE,GAAI5C,KAAK6C,aAAe7C,KAAK6C,YAAYC,UAAW,CAClD,IAAMC,EAAS/C,KAAK6C,YAAYC,YAChC,IAAK,IAAMf,KAAKgB,EACVA,EAAOhB,IAAMgB,EAAOhB,GAAGiB,MACzBD,EAAOhB,GAAGiB,OAIZhD,KAAKiD,eAAiBjD,KAAKiD,cAAc1C,gBAC3CP,KAAKiD,cAAc1C,cAAc2C,IAAM,GACnClD,KAAKiD,cAAc1C,cAAc4C,OACnCnD,KAAKiD,cAAc1C,cAAc4C,UAMvCrD,EAAAI,UAAAkD,gBAAA,WACEpD,KAAKqD,aAAe,OACpBrD,KAAK2C,cAGP7C,EAAAI,UAAAoD,kBAAA,WAAA,IAAAC,EAAAvD,KACEA,KAAKqD,aAAe,SAEpBrD,KAAK2C,aAEL,IAAMa,EAAO,UACbA,EAAQC,aACND,EAAQC,cACRD,EAAQE,oBACRF,EAAQG,iBACRH,EAAQI,eAGVJ,EAAQK,aAAaJ,aAAa,CAACK,OAAQ,EAAMC,OAAQ,IAAQC,KAAK,SAAAC,GACpEV,EAAKV,YAAcoB,EACnBV,EAAKN,cAAc1C,cAAc2C,IAAMgB,OAAOC,IAAIC,gBAAgBH,GAClEV,EAAKN,cAAc1C,cAAc8D,UAIrCvE,EAAAI,UAAAoE,kBAAA,WACEtE,KAAKqD,aAAe,SAEpBrD,KAAK2C,cAGP7C,EAAAI,UAAAqE,aAAA,WACEvE,KAAKwE,qBACFjE,cACAkE,WAAW,MACXC,UACC1E,KAAKiD,cAAc1C,cACnB,EACA,EACAP,KAAKwE,qBAAqBjE,cAAcoE,MACxC3E,KAAKwE,qBAAqBjE,cAAcqE,QAE5C5E,KAAK4C,kBACL5C,KAAKuB,UAAW,EAChB,IAAMsD,EAAIC,EAAAA,SACJC,EAAUF,EAAEE,QAAQ/E,KAAKwE,qBAAqBjE,eACpDsE,EAAEG,KAAKD,GACEE,eAAe,GAAI,GACnBC,YAAY,GAAI,GAChBC,mBAAmB,GAAK,IACxBC,SACTnE,QAAQC,IAAI2D,GAEZ7E,KAAKqF,cAAgBR,EAAErC,aAGzB1C,EAAAI,UAAAoF,eAAA,WACEtF,KAAK2C,aACL3C,KAAKsD,yCAhSRiC,EAAAA,UAAS3F,KAAA,CAAC,CACT4F,SAAU,gBACVC,SAAU,u+JA0FVC,OAAQ,CAAC,4rBAlGQC,EAAAA,yDA6GhBC,EAAAA,+BAGAC,EAAAA,UAASjG,KAAA,CAAC,0CACViG,EAAAA,UAASjG,KAAA,CAAC,uCACViG,EAAAA,UAASjG,KAAA,CAAC,wCACViG,EAAAA,UAASjG,KAAA,CAAC,sCAoBVkG,EAAAA,aAAYlG,KAAA,CAAC,WAAY,CAAC,gCAO1BkG,EAAAA,aAAYlG,KAAA,CAAC,YAAa,CAAC,2BAK3BkG,EAAAA,aAAYlG,KAAA,CAAC,OAAQ,CAAC,gBA1JzB,GCAAmG,EAAA,WAWE,SAAAA,EACUC,GAAAhG,KAAAgG,OAAAA,uBAHwC,IAAI/F,EAAAA,oBAMnB8F,EAAA7F,UAAA+F,uBAAcxF,cAE/CT,KAAKgG,OAAOE,KAAKpG,EAAuB,CACtCqG,WAAY,gBACXC,cAAcC,UAAU,SAAAC,GAErBA,GACF/C,EAAKgD,gBAAgBC,KAAKF,0BAlBjCG,EAAAA,UAAS7G,KAAA,CAAC,CACT4F,SAAU,iEAJJkB,EAAAA,sDAQLd,EAAAA,8BAMAE,EAAAA,aAAYlG,KAAA,CAAC,QAAS,CAAC,gBAf1B,GCAA+G,EAAA,oDAOCC,EAAAA,SAAQhH,KAAA,CAAC,CACRiH,QAAS,CACPC,EAAAA,aACAC,EAAAA,mBACAC,EAAAA,gBACAC,EAAAA,qBACAC,EAAAA,yBAEFC,aAAc,CACZrH,EACAiG,GAEFqB,QAAS,CACPtH,EACAiG,GAEFsB,gBAAiB,CACfvH,SAxBJ","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxSignatureService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { HostListener } from '@angular/core';\nimport { ViewChild } from '@angular/core';\nimport * as SignaturePad from 'signature_pad';\nimport * as fx from 'glfx-es6';\nimport { Output } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport {MatDialog, MatDialogRef} from '@angular/material';\n\n\n\n// declare const $;\n\n@Component({\n  selector: 'ngx-signature',\n  template: `<div class=\"ngx-signature-modal\" id=\"ngx-signature\">\n    <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n\n          <!-- Modal Header -->\n          <div class=\"modal-header\">\n            <h4 class=\"modal-title\">E-Sign</h4>\n            <button type=\"button\" class=\"close\" (click)=\"dialogRef.close()\">&times;</button>\n          </div>\n\n          <!-- Modal body -->\n          <div class=\"modal-body\">\n              <ul class=\"nav nav-tabs\" role=\"tablist\">\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" [ngClass]=\"selected_tab === 'draw' ? 'active' : ''\" (click)=\"activateDrawTab()\" role=\"tab\" > <i class=\"fa fa-edit\"></i> Draw</a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" [ngClass]=\"selected_tab === 'camera' ? 'active' : ''\" (click)=\"activateCameraTab()\" role=\"tab\" > <i class=\"fa fa-camera\"></i> Snap</a>\n                  </li>\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" [ngClass]=\"selected_tab === 'upload' ? 'active' : ''\" (click)=\"activateUploadTab()\" role=\"tab\" > <i class=\"fa fa-image\"></i> Upload</a>\n                  </li>\n              </ul>\n              <div  [style.visibility]=\"selected_tab === 'draw' ? 'visible' : 'hidden'\" role=\"tabpanel\" class=\"tab-pane \" [ngClass]=\"selected_tab === 'draw' ? 'active' : 'fade'\" id=\"draw\">\n                  <span class=\"draw-text\">You can sign using your touchpad or mouse inside rectangular area</span>\n                  <canvas #signaturePad height=\"300\" width=\"470\" class=\"signature-pad\"></canvas>\n                  <button (click)=\"clearDrawing()\" class=\"btn btn-light\">Clear</button>\n                  <button (click)=\"doneDrawing()\" class=\"btn btn-primary pull-right\">\n                    Done\n                  </button>\n              </div>\n              <div [style.visibility]=\"selected_tab === 'upload' ? 'visible' : 'hidden'\" role=\"tabpanel\" class=\"tab-pane\" [ngClass]=\"selected_tab === 'upload' ? 'active' : 'fade'\" id=\"upload\">\n                  <div *ngIf=\"!selected\" class=\"upload\" [ngClass]=\"{'dragging' : dragging}\">\n                    <input type=\"file\" (change)=\"uploadFileChange($event)\" #fileUpload >\n                    <button *ngIf=\"!dragging\" class=\"btn\">\n                      <i class=\"fa fa-upload\"></i> Select a file to upload\n                    </button>\n                    <button *ngIf=\"dragging\" class=\"btn btn-light\">\n                      Drop file here to upload\n                    </button>\n                  </div>\n                  <div *ngIf=\"selected\" class=\"image\">\n                      <span class=\"crop-text\">Crop the image to the best fit</span>\n                      <image-cropper\n                        [imageChangedEvent]=\"uploadFileChangedEvent\"\n                        [maintainAspectRatio]=\"false\"\n                        format=\"png\"\n                        (imageCropped)=\"imageCropped($event)\"\n                        (imageLoaded)=\"imageLoaded()\"\n                        (loadImageFailed)=\"loadImageFailed()\"\n                      ></image-cropper>\n                      <br>\n                      <button (click)=\"doneCropping()\" class=\"btn btn-primary pull-right\">\n                        Done\n                      </button>\n                  </div>\n              </div>\n              <div [style.visibility]=\"selected_tab === 'camera' ? 'visible' : 'hidden'\" role=\"tabpanel\" class=\"tab-pane\" [ngClass]=\"selected_tab === 'camera' ? 'active' : 'fade'\" id=\"camera\">\n                  <div *ngIf=\"!selected\" class=\"capture\">\n                      <span class=\"camera-text\">Put signature near your camera and click on take snapshot</span>\n                      <canvas #cameraSnapshot height=\"300\" width=\"470\" style=\"display:none\"></canvas>\n\n                      <video  #camera height=\"300\" width=\"470\" class=\"signature-pad\"></video>\n                      <button class=\"btn btn-primary btn-block\" (click)=\"takeSnapshot()\">Take Snapshot</button>\n                  </div>\n                  <div *ngIf=\"selected\" class=\"capture\">\n                      <span class=\"crop-text\">Crop the image to the best fit</span>\n                      <image-cropper\n                        [imageBase64]=\"capturedImage\"\n                        [maintainAspectRatio]=\"false\"\n                        format=\"png\"\n                        (imageCropped)=\"imageCropped($event)\"\n                        (imageLoaded)=\"imageLoaded()\"\n                        (loadImageFailed)=\"loadImageFailed()\"\n                      ></image-cropper>\n                      <button (click)=\"retakeSnapshot()\" class=\"btn btn-light\">Retake Snapshot</button>\n\n                      <button (click)=\"doneCropping()\" class=\"btn btn-primary pull-right\">\n                        Done\n                      </button>\n                  </div>\n              </div>\n          </div>\n\n\n\n        </div>\n      </div>\n</div>\n`,\n  styles: [`.upload{margin-top:15px;margin-bottom:15px;padding:15px;width:100%;min-height:100px;border:2px dashed silver;text-align:center;display:flex;flex-direction:row;justify-content:center;align-items:center;position:relative}.upload input[type=file]{position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.upload.dragging{border:2px dashed #212121}:host image-cropper>.cropper{outline-color:rgba(1,1,1,.2)}.camera-text,.crop-text,.draw-text{display:block;text-align:center;padding-top:15px;padding-bottom:5px;font-size:14px}.tab-pane{display:none}.tab-pane.active{display:block}.signature-pad{border:1px solid #000;border-radius:5px}`]\n})\nexport class NgxSignatureComponent implements OnInit {\n  dragging = false;\n  selected = false;\n  uploadFileChangedEvent;\n  capturedImage;\n  croppedImage;\n\n  selected_tab = 'draw';\n\n  @Output() onSignatureDone: EventEmitter<string> = new EventEmitter<string>();\n\n  responseImage;\n  @ViewChild('fileUpload') fileInputField;\n  @ViewChild('signaturePad') signaturePadCanvas;\n  @ViewChild('camera') cameraElement;\n  @ViewChild('cameraSnapshot') cameraSnapshotCanvas;\n\n  signaturePad;\n  videoStream;\n  constructor(\n    public dialogRef: MatDialogRef<NgxSignatureComponent>,\n    // private dialog: MatDialog\n  ) { }\n\n  ngOnInit() {\n\n    this.signaturePad = new SignaturePad.default(this.signaturePadCanvas.nativeElement);\n    // $('#ngx-signature').on('hidden.bs.modal',  () => {\n    //   this.resetModal();\n    // });\n    // $('#ngx-signature').on('show.bs.modal',  () => {\n    //   $('a[href=\\'#draw\\']').click();\n    // });\n  }\n\n  @HostListener('dragover', ['$event']) onDragOver(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    const files = evt.dataTransfer.files;\n    this.dragging = true;\n\n  }\n  @HostListener('dragleave', ['$event']) onDragLeave(evt) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    this.dragging = false;\n  }\n  @HostListener('drop', ['$event']) public onDrop(evt) {\n    this.dragging = false;\n    console.log(evt);\n  }\n\n\n  uploadFileChange(e) {\n    if (this.validateFiles(e.target.files)){\n      this.selected = true;\n      this.uploadFileChangedEvent = e;\n    }\n  }\n  imageCropped(image: string) {\n    this.croppedImage = image;\n  }\n  imageLoaded() {\n      // show cropper\n  }\n  loadImageFailed() {\n      // show message\n  }\n\n  validateFiles(files) {\n    if (files.length) {\n        for (let i = 0 ; i < files.length; i++) {\n            if (!(files[i].type.match('image'))) {\n                alert('Invalid file! Only images are allowed.');\n                return false;\n            }\n            if ( ((files[i].size / 1024) / 1024) > 5) {\n                alert('Invalid file! File size exceeds 5 MB.');\n                return false;\n            }\n        }\n    }\n    return true;\n  }\n\n  doneCropping() {\n    this.responseImage = this.croppedImage;\n    // this.onSignatureDone.emit(this.responseImage);\n    this.dialogRef.close(this.responseImage);\n    // $('#ngx-signature').modal('hide');\n  }\n\n  doneDrawing() {\n    this.responseImage = this.signaturePad.toDataURL();\n    // this.onSignatureDone.emit(this.responseImage);\n    this.dialogRef.close(this.responseImage);\n\n    // $('#ngx-signature').modal('hide');\n  }\n\n\n  clearDrawing() {\n    if (this.signaturePad && this.signaturePad.clear) {\n      this.signaturePad.clear();\n    }\n  }\n\n  resetModal() {\n    // Clear Drawing section\n    this.clearDrawing();\n    // Clear Upload Section\n    this.uploadFileChangedEvent = null;\n    this.croppedImage = null;\n    this.selected = false;\n    // Clear snap section\n    this.stopVideoStream();\n  }\n\n  stopVideoStream() {\n    if (this.videoStream && this.videoStream.getTracks) {\n      const tracks = this.videoStream.getTracks();\n      for (const i in tracks) {\n        if (tracks[i] && tracks[i].stop) {\n          tracks[i].stop();\n        }\n      }\n    }\n    if (this.cameraElement && this.cameraElement.nativeElement) {\n      this.cameraElement.nativeElement.src = '';\n      if (this.cameraElement.nativeElement.pause) {\n        this.cameraElement.nativeElement.pause();\n      }\n    }\n\n  }\n\n  activateDrawTab() {\n    this.selected_tab = 'draw';\n    this.resetModal();\n  }\n\n  activateCameraTab() {\n    this.selected_tab = 'camera';\n\n    this.resetModal();\n\n    const browser = <any>navigator;\n    browser.getUserMedia = (\n      browser.getUserMedia ||\n      browser.webkitGetUserMedia ||\n      browser.mozGetUserMedia ||\n      browser.msGetUserMedia\n    );\n\n    browser.mediaDevices.getUserMedia({video : true, audio : false}).then(stream => {\n      this.videoStream = stream;\n      this.cameraElement.nativeElement.src = window.URL.createObjectURL(stream);\n      this.cameraElement.nativeElement.play();\n    });\n  }\n\n  activateUploadTab() {\n    this.selected_tab = 'upload';\n\n    this.resetModal();\n  }\n\n  takeSnapshot() {\n    this.cameraSnapshotCanvas\n      .nativeElement\n      .getContext('2d')\n      .drawImage(\n        this.cameraElement.nativeElement,\n        0,\n        0,\n        this.cameraSnapshotCanvas.nativeElement.width,\n        this.cameraSnapshotCanvas.nativeElement.height\n      );\n    this.stopVideoStream();\n    this.selected = true;\n    const c = fx.canvas();\n    const texture = c.texture(this.cameraSnapshotCanvas.nativeElement);\n    c.draw(texture)\n            .hueSaturation(-1, -1)// grayscale\n            .unsharpMask(20, 2)\n            .brightnessContrast(0.2, 0.9)\n            .update();\n    console.log(c);\n\n    this.capturedImage = c.toDataURL();\n  }\n\n  retakeSnapshot() {\n    this.resetModal();\n    this.activateCameraTab();\n  }\n}\n","import {Directive, EventEmitter, Host, HostListener, Output} from '@angular/core';\nimport {MatDialog} from '@angular/material';\nimport {NgxSignatureComponent} from './ngx-signature.component';\n\n@Directive({\n  selector: '[appNgxSignature]'\n})\nexport class NgxSignatureDirective {\n\n  @Output() onSignatureDone: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(\n    private dialog: MatDialog\n  ) { }\n\n  @HostListener('click', ['$event']) openComponent(evt) {\n\n    this.dialog.open(NgxSignatureComponent, {\n      panelClass: 'transparent'\n    }).afterClosed().subscribe(res => {\n      // console.log()\n      if (res) {\n        this.onSignatureDone.emit(res);\n      }\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxSignatureComponent } from './ngx-signature.component';\nimport { ImageCropperModule } from 'ngx-image-cropper';\nimport { NgxSignatureDirective } from './ngx-signature.directive';\nimport {MatDialogModule} from '@angular/material';\nimport {BrowserAnimationsModule, NoopAnimationsModule} from '@angular/platform-browser/animations';\n@NgModule({\n  imports: [\n    CommonModule,\n    ImageCropperModule,\n    MatDialogModule,\n    NoopAnimationsModule,\n    BrowserAnimationsModule\n  ],\n  declarations: [\n    NgxSignatureComponent,\n    NgxSignatureDirective\n  ],\n  exports: [\n    NgxSignatureComponent,\n    NgxSignatureDirective\n  ],\n  entryComponents: [\n    NgxSignatureComponent\n  ]\n})\nexport class NgxSignatureModule { }\n"]}